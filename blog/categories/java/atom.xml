<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-04-11T08:27:46+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jetty9作为Linux服务配置记录]]></title>
    <link href="http://nkcoder.github.io/blog/20140411/jetty-as-linux-service/"/>
    <updated>2014-04-11T08:04:08+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140411/jetty-as-linux-service</id>
    <content type="html"><![CDATA[<p>最近将项目都升级到了Jetty 9 和JDK 7，记录一下配置的过程。以下配置基于的版本为：</p>

<ul>
<li>Jetty：9.1.1.v20140108</li>
<li>JDK：1.7.0_51</li>
<li>官方文档版本：2014-03-17T10:14:41-05:00</li>
</ul>


<h3>1. 作为root用户配置</h3>

<p>如果你希望以root用户启动jetty。并将jetty配置为服务，以下为快速通道：</p>

<h4>1.1 将脚本jetty.sh拷贝init.d目录下</h4>

<pre><code># cp bin/jetty.sh /etc/init.d/jetty
</code></pre>

<blockquote><p>jetty.sh是jetty的启动脚本。</p></blockquote>

<h4>1.2 配置/etc/default/jetty</h4>

<pre><code># vim /etc/default/jetty
---------------------------------------------------
PATH=$PATH:/usr/local/jdk1.7.0_51/bin 
JETTY_HOME=/usr/local/jetty9.1 
TMPDIR=/usr/local/jetty9.1/tmp
---------------------------------------------------
</code></pre>

<blockquote><p>jetty.sh脚本会将/etc/default/下同名的文件作为其配置文件。需要配置几个环境变量：主要是java和jetty的根目录，以及指定一个目录作为jetty解压war包时的临时目录，默认是/tmp（不够安全，因为系统服务可能会不定时删除/tmp目录）。</p></blockquote>

<h4>1.3 启动与关闭</h4>

<pre><code># service jetty start
# service jetty stop
</code></pre>

<blockquote><p>init.d目录下的jetty就是服务名.
参考：<a href="http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html">Startup a Unix Service using jetty.sh</a></p></blockquote>

<h3>2. 作为普通用户配置</h3>

<p>如果你希望以普通用户运行jetty，并且可以灵活扩展到多工程的部署，同时jetty升级方便，可以参考一下步骤。</p>

<h4>2.1 配置工程目录</h4>

<p>新建工程目录vrs-base</p>

<pre><code>[root@localhost www]# mkdir vrs-base
[root@localhost www]# cd vrs-base/
[root@localhost www]# mkdir tmp
[root@localhost vrs-base]# pwd
/opt/www/vrs-base
</code></pre>

<p>配置jetty环境</p>

<pre><code>[root@localhost vrs-base]# cp $JETTY_HOME/start.ini /opt/www/vrs-base
[root@localhost vrs-base]# java -jar $JETTY_HOME/start.jar --add-to-start=http,deploy,logging
</code></pre>

<p>修改端口</p>

<pre><code>[root@localhost vrs-base]# grep port start.ini 
jetty.port=8080 
</code></pre>

<h4>2.2 配置服务脚本和属性</h4>

<pre><code>[root@localhost www]# cp $JETTY_HOME/bin/jetty.sh /etc/init.d/jetty-vrs
[root@localhost www]# vim /etc/default/jetty-vrs
---------------------------------------------------
PATH=$PATH:/usr/local/jdk1.7.0_51/bin 
JETTY_HOME=/usr/local/jetty9.1 
JETTY_BASE=/opt/www/vrs-base
TMPDIR=/opt/www/vrs-base/tmp
---------------------------------------------------
</code></pre>

<blockquote><p>JETTY_HOME环境变量表示jetty的安装根目录，JETTY_BASE环境变量表示当前应用的根目录，TEPDIR表示应用被jetty解压后的临时目录，不建议使用默认的/tmp目录。</p></blockquote>

<h4>2.3 应用部署</h4>

<pre><code>[root@localhost vrs-base]# cp /opt/www/vrs.xml /opt/www/vrs-base/webapps/
[root@localhost vrs-base]# cp /opt/www/vrs.war /opt/www/vrs-base/webapps/
</code></pre>

<blockquote><p>将应用的xml配置文件和war包放到$JETTY_BASE/webapps目录中，jetty对该目录下的内容进行自动部署和扫描。</p></blockquote>

<h4>2.4 新建用户/修改权限</h4>

<pre><code># useradd -U www 
# chown -R www $JETTY_HOME
# chown -R www /opt/www
# chown -R www /opt/logs
</code></pre>

<blockquote><p><strong>注意</strong>：所有jetty会访问的目录都需要修改权限，如：排行榜系统在/opt/rank目录下生成文件，则该目录也需要修改为www用户权限。</p></blockquote>

<h4>2.5 启动与停止</h4>

<pre><code>[root@localhost vrs-base]# su - www service jetty-vrs start
Starting Jetty: 2014-04-04 10:17:58.452:INFO::main: Redirecting stderr/stdout to /opt/www/vrs-base/logs/2014_04_04.stderrout.log
. . . . OK Fri Apr  4 10:18:17 CST 2014 

[root@localhost vrs-base]# ps -ef | grep jetty
www       2821     1 65 10:19 pts/1    00:00:15 /usr/local/jdk1.7.0_51/bin/java -Djetty.state=/opt/www/vrs-base/jetty-vrs.state -Djetty.logs=/opt/www/vrs-base/logs -Djetty.home=/usr/local/jetty9.1 -Djetty.base=/opt/www/vrs-base -Djava.io.tmpdir=/opt/www/vrs-base/tmp -jar /usr/local/jetty9.1/start.jar jetty-logging.xml jetty-started.xml
root      2887  1929  0 10:19 pts/1    00:00:00 grep jetty

[root@localhost vrs-base]# su - www service jetty-vrs stop
Stopping Jetty: OK
</code></pre>

<h4>2.6 多应用部署</h4>

<p>可以使用同一个jetty，启动多个实例，每个实例部署一个应用，并作为服务运行。
重复2.1~2.5的步骤，只需要再定义一个JETTY_BASE，在/etc/init.d目录下添加一个对应的服务名即可。
即：将2.1中的vrs-base修改为ugc-base，将2.2中的jetty-vrs修改为jetty-ugc，启动和停止：</p>

<pre><code>$ su - www service jetty-ugc start
$ su - www service jetty-ugc stop
</code></pre>

<h4>附录</h4>

<p>xml配置文件示例(feedback.xml):</p>

<pre><code>&lt;?xml version="1.0"  encoding="UTF-8"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd"&gt;

&lt;Configure class="org.eclipse.jetty.webapp.WebAppContext"&gt;

  &lt;Set name="contextPath"&gt;/&lt;/Set&gt;
  &lt;Set name="war"&gt;/opt/www/feedback-base/webapps/feedback.war&lt;/Set&gt;
  &lt;Set name="tempDirectory"&gt;/opt/www/feedback-base/tmp&lt;/Set&gt;
  &lt;Set name="persistTempDirectory"&gt;true&lt;/Set&gt;

   &lt;Set name="handler"&gt;
    &lt;New id="RequestLog" class="org.eclipse.jetty.server.handler.RequestLogHandler"&gt;
      &lt;Set name="requestLog"&gt;
        &lt;New id="RequestLogImpl" class="org.eclipse.jetty.server.NCSARequestLog"&gt;
          &lt;Set name="filename"&gt;&lt;Property name="jetty.logs" default="./logs"/&gt;/feedback-yyyy_mm_dd.request.log&lt;/Set&gt;
          &lt;Set name="filenameDateFormat"&gt;yyyy_MM_dd&lt;/Set&gt;
          &lt;Set name="LogTimeZone"&gt;Asia/Shanghai&lt;/Set&gt;
          &lt;Set name="retainDays"&gt;60&lt;/Set&gt;
          &lt;Set name="append"&gt;true&lt;/Set&gt;
        &lt;/New&gt;
      &lt;/Set&gt;
    &lt;/New&gt;
  &lt;/Set&gt;

&lt;/Configure&gt;
</code></pre>

<p>/etc/default目录下的配置文件示例(jetty-feedback)：</p>

<pre><code>JAVA=/usr/local/jdk7/bin/java
JETTY_HOME=/usr/local/jetty9
JETTY_BASE=/opt/www/feedback-base
TMPDIR=/opt/www/feedback-base/tmp   
</code></pre>

<p>启动/停止脚本示例(jettyctl.sh)</p>

<pre><code># usage
usage()
{
    echo "Usage: ${0##*/} {start|stop|status|restart}"
    exit 1
}

# need one param
if [ $# -lt 1 ]; then
    usage
fi

action=$1

# control jetty
case "$action" in
    start)
        su - www service jetty-vrs start
    ;;
    stop)
        su - www service jetty-vrs stop
    ;;
    status)
        su - www service jetty-vrs status
    ;;
    restart)
        su - www service jetty-vrs restart
    ;;
    *)  
        usage
    ;;
esac
</code></pre>

<h4>参考</h4>

<ul>
<li><a href="http://www.eclipse.org/jetty/documentation/current/startup-unix-service.html">Startup a Unix Service using jetty.sh</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String.java 源码学习]]></title>
    <link href="http://nkcoder.github.io/blog/20140104/java-string-source/"/>
    <updated>2014-01-04T00:27:12+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140104/java-string-source</id>
    <content type="html"><![CDATA[<h3>1. 存储结构</h3>

<p>```java</p>

<pre><code>private final char value[];
</code></pre>

<p>```</p>

<blockquote><p>备注：String的底层是通过字符数组实现的，而且是常量，所以我们不能修改String类型的变量的值。</p></blockquote>

<h3>2. 构造函数</h3>

<blockquote><p>String的构造函数有很多：不带参数，参数可以为String, char[], byte[], StringBuffer, StringBuilder等。</p></blockquote>

<h4>2.1 第一类</h4>

<p>```java</p>

<pre><code>public String() {
    this.value = new char[0];
}

public String(String original) {
    this.value = original.value;
    this.hash = original.hash;
}
</code></pre>

<p>```</p>

<blockquote><p>备注：因为String是常量，不能被修改，因此这两个构造函数，如无必要一般不用。</p></blockquote>

<h4>2.2 第二类</h4>

<p>```java</p>

<pre><code>public String(char value[]) {
    this.value = Arrays.copyOf(value, value.length);
}

public String(StringBuffer buffer) {
    synchronized(buffer) {
        this.value = Arrays.copyOf(buffer.getValue(), buffer.length());
    }
}

public String(StringBuilder builder) {
    this.value = Arrays.copyOf(builder.getValue(), builder.builder.length());
}
</code></pre>

<p>```</p>

<blockquote><p>备注：char[]，StringBuffer，StringBuilder的内在存储结构都是char[]，所以这几个构造函数都是通过Arrays的copyOf函数执行复制操作，Arrays.copyOf函数是通过System.arraycopy实现的，这个函数在看到Arrays的源码时再解释。</p></blockquote>

<h4>2.3 第三类</h4>

<p>```java</p>

<pre><code>public String(byte bytes[]) {
    this(bytes, 0, bytes.length);
}

public String(byte bytes[], int offset, int length) {
    checkBounds(bytes, offset, length);
    this.value = StringCoding.decode(bytes, offset, length);
}

public String(byte bytes[], int offset, int length, Charset charset) {
    if (charset == null)
        throw new NullPointerException("charset");
    checkBounds(bytes, offset, length);
    this.value = StringCoding.decode(charset, bytes, offset, length);
}
</code></pre>

<p>```</p>

<blockquote><p>备注：使用byte[]时，需要解码，如果没有指定字符编码，会使用系统默认的编码。</p></blockquote>

<h3>3. 常用函数</h3>

<h4>3.1 第一类</h4>

<p>```java</p>

<pre><code>public int length() {
    return value.length;
}

public boolean isEmpty() {
    return value.length == 0;
}

public char charAt(int index) {
    if ((index &lt; 0) || (index &gt;= value.length)) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return value[index];
}
</code></pre>

<p>```</p>

<blockquote><p>备注：length在String，StringBuilder，StringBuffer里面都是函数length()，在char[]是成员变量。</p></blockquote>

<h4>3.2 第二类</h4>

<p>```java</p>

<pre><code>public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
    if (srcBegin &lt; 0) {
        throw new StringIndexOutOfBoundsException(srcBegin);
    }
    if (srcEnd &gt; value.length) {
        throw new StringIndexOutOfBoundsException(srcEnd);
    }
    if (srcBegin &gt; srcEnd) {
        throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);
    }
    System.arraycopy(value, 0, dst, dstBegin, value.length);
}

public byte[] getBytes(){
    return StringCoding.encode(value, 0, value.length);
}
</code></pre>

<p>```</p>

<blockquote><p>备注：getChars就是在字符级别进行复制，getBytes需要指定字符集解码。</p></blockquote>

<h4>3.3 第三类</h4>

<p>```java</p>

<pre><code>public boolean equals(Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceOf String) {
        String anotherString = (String) anObject;
        int n = value.length;
        if (n == anotherString.value.length) {
            char v1[] = value;
            char v2[] =  anotherString.value;
            int i = 0;
            while (n-- &gt; 0) {}
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
    }
    return false;
}

public boolean equalsIgnoreCase(String anotherString) {
    return (this == anotherString) ? true
        : (anotherString != null) &amp;&amp; 
        (anotherString.value.length == value.length) &amp;&amp; 
        regionMatches(true, 0, anotherString, 0, value.length);
}
</code></pre>

<p>```</p>

<blockquote><p>备注：字符串的比较，都是针对String类型的，一个是大小写敏感，一个忽略大小写，内部实现差不多的。</p></blockquote>

<h4>3.4 第四类</h4>

<p>```java</p>

<pre><code>public int compareToIgnoreCase(String str) {
    return CASE_INSENSITIVE_ORDER.compare(this, str);
}
</code></pre>

<p>```</p>

<blockquote><p>备注：CASE_INSENSITIVE_ORDER是内部静态类的一个实例，所以直接调用的效果是一样的：String.CASE_INSENSITIVE_ORDER.compare(str1, str2);</p></blockquote>
]]></content>
  </entry>
  
</feed>
