<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-03-30T18:40:34+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring持久化之Hibernate]]></title>
    <link href="http://nkcoder.github.io/blog/20140330/spring-hibernate-example/"/>
    <updated>2014-03-30T18:37:27+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140330/spring-hibernate-example</id>
    <content type="html"><![CDATA[<p>本文简要介绍Spring通过Hibernate实现持久化需要的基本配置，分别通过注解和xml配置来实现。</p>

<h3>1. 通过注解实现</h3>

<h4>1.1 添加pom依赖</h4>

<p>在pom的xml里添加<em>Hibernate</em>相关的依赖，如：</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
    &lt;version&gt;3.6.10.Final&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
    &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;version&gt;${javax.persist}&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;javassist&lt;/groupId&gt;
    &lt;artifactId&gt;javassist&lt;/artifactId&gt;
    &lt;version&gt;3.12.1.GA&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<h4>1.2 实体类的注解定义</h4>

<p>先定义一个实体类StudentEntity.java，映射到数据库中的表students：</p>

<pre><code>@Entity
@Table(name = "students")
public class StudentEntity {
    @Id
    @Column(name = "id", nullable = false)
    @GeneratedValue
    private int id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "sex", nullable = true)
    private String sex;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public StudentEntity() {}

    public StudentEntity(String name, String sex) {
        this.name = name;
        this.sex = sex;
    }
}
</code></pre>

<blockquote><p><strong>@Entity</strong>表示这是一个实体类，<strong>@Table(name = &ldquo;students&rdquo;)</strong>表示映射到数据源指定的数据库中的一个名为<em>students</em>的表；<strong>@Id</strong>表示该字段是主键，<strong>@Column(name = &ldquo;id&rdquo;, nullable = false)</strong>表示该属性映射到表中名为<em>id</em>的属性，且不能为空；<strong>@GeneratedValue</strong>表示该字段是自增的；这样定义之后，该实体类便与表<em>students</em>完成了一一对应。</p></blockquote>

<h4>1.3 定义dao实现类</h4>

<p>我们的dao实现类为HibernateDaoImpl.java，依赖一个属性，即<em>SessionFactory</em>的实例，我们通过注解实现注入：</p>

<pre><code>@Repository (value = "hibernateDaoImpl")
public class HibernateDaoImpl implements StudentDao {

    @Resource(name = "sessionFactory")
    SessionFactory sessionFactory;

    @Override
    @Transactional
    public StudentEntity getUserNameById(int id) {
        StudentEntity studentEntity = (StudentEntity) sessionFactory.getCurrentSession().get(StudentEntity.class, id);
        return studentEntity;
    }

    @Override
    @Transactional
    public void saveStudents(StudentEntity studentEntity) {
        sessionFactory.getCurrentSession().persist(studentEntity);
    }
}
</code></pre>

<blockquote><p><strong>Repository</strong>注解表示该类会被Spring的注解扫描器自动定义为bean，bean的名字为<em>hibernateDaoImpl</em>，同时实现异常转换，将Hibernate的检查型异常，转换为Spring的非检查型异常，这是通过在Spring配置文件里配置<strong>PersistenceExceptionTranslationPostProcessor</strong>的ban实现的。通过<em>sessionFactory</em>的<em>getCurrentSession</em>方法获取当前的<em>session</em>，实现对数据库的持久化操作。Hibernate还要求这些操作是与事务绑定的，因此需要在dao层或者service层添加事务的注解，即<em>@Transactional</em>。</p></blockquote>

<h4>1.4 添加Spring配置</h4>

<p>在Spring配置文件applicationContext.xml主要是添加<strong>SessionFactory</strong>的配置，以及配置事务，与<em>Hibernate</em>相关的配置如下：</p>

<pre><code>&lt;bean name="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="feedbackDataSource"/&gt;
    &lt;property name="packagesToScan" value="com.sohu.tv.bean"/&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;
            &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/&gt;

&lt;bean id="tx" class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt;
    &lt;property name="sessionFactory" ref="sessionFactory"/&gt;
&lt;/bean&gt;

&lt;tx:annotation-driven transaction-manager="tx"/&gt;
</code></pre>

<blockquote><p>在定义<em>sessionFactory</em>的bean时，因为是基于注解的，所以引用的class为：<strong>AnnotationSessionFactoryBean</strong>；属性<em>dataSource</em>即配置的数据源；属性<em>packagesToScan</em>即要扫描的包名，在这个包下的所有类，如果使用了<em>@Entity</em>、<em>@Column</em>等注解，都会被扫描器处理；<em>@hibernateProperties</em>属性定义了Hibernate相关的属性，如使用的dialect，是否显示输出sql语句等。<strong>PersistenceExceptionTranslationPostProcessor</strong>定义的bean是进行异常转换的；<em>HibernateTransactionManager</em>用于定义事务；<em>&lt;tx:annotation-driven /></em>类似于<em>&lt;context:component-scan /></em>，扫描事务类型的注解。</p></blockquote>

<h3>2. 通过xml映射文件实现</h3>

<p>通过xml映射文件与通过注解实现的区别就在于实体类与数据库之间的映射的定义，所以其它相同的部分就不重复了。</p>

<h4>2.1 定义映射文件</h4>

<p>这个映射文件定义实体类与数据库的表之间的映射，即属性与字段的映射，如hibernate.xml文件内容可以如下定义：</p>

<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;
&lt;hibernate-mapping&gt;
    &lt;class name="com.sohu.tv.bean.Students" table="students"&gt;

        &lt;id name="id" type="int"&gt;
            &lt;column name="id" /&gt;
            &lt;generator class="identity" /&gt;
        &lt;/id&gt;
        &lt;property name="name" type="string"&gt;
            &lt;column name="name" length="255" not-null="true" /&gt;
        &lt;/property&gt;
        &lt;property name="sex" type="string"&gt;
            &lt;column name="sex" not-null="false" /&gt;
        &lt;/property&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<h4>2.2 修改Spring配置文件</h4>

<p>需要修改的是<em>sessionFactory</em>的bean的定义，如：</p>

<pre><code>&lt;bean name="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="feedbackDataSource"/&gt;
    &lt;property name="mappingLocations"&gt;
        &lt;list&gt;
            &lt;value&gt;classpath*:hibernate.xml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
            &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;
            &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<blockquote><p>将<strong>AnnotationSessionFactoryBean</strong>修改为<strong>LocalSessionFactoryBean</strong>，同时，需要将属性<em>packagesToScan</em>修改为<em>mappingLocations</em>，即xml映射文件的位置。</p></blockquote>

<h4>参考：</h4>

<ul>
<li><a href="http://book.douban.com/subject/24714203/">Spring 实战</a></li>
<li><a href="http://www.mkyong.com/struts/struts-spring-hibernate-integration-example/">Struts + Spring + Hibernate Integration Example</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring持久化之MyBatis]]></title>
    <link href="http://nkcoder.github.io/blog/20140322/spring-mybatis/"/>
    <updated>2014-03-22T20:12:52+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140322/spring-mybatis</id>
    <content type="html"><![CDATA[<p>MyBatis是一个优秀的轻量级持久化框架，本文主要介绍MyBatis与Spring集成的配置与用法。</p>

<h3>1. Spring MyBatis配置</h3>

<h3>1.1 添加Maven依赖</h3>

<p>在pom.xml文件里添加mybatis-spring和mybatis的依赖：</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
    &lt;version&gt;${mybatis.spring.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;version&gt;${mybatis.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<blockquote><p>mybatis-spring当前最新版本为1.2.2，mybatis当前版本是3.2.5.</p></blockquote>

<h3>1.2 添加dao接口</h3>

<p>这里的dao必须是接口，而不是具体的实现，如MyBatisDao.java内容为：</p>

<pre><code>public interface MyBatisTest {

    public String getUserNameById(int id);

    public List&lt;Students&gt; getStudentByNumAndCity(Map&lt;String, Object&gt; queryMap);
}
</code></pre>

<blockquote><p>接口中定义的每一个方法对应于mapper映射文件中定义的jdbc执行模块，如<code>&lt;select/&gt;</code>、<code>&lt;update/&gt;</code>、<code>&lt;insert/&gt;</code>等。</p></blockquote>

<h3>1.3 添加mybatis配置文件</h3>

<p>该配置文件里主要配置类型别名<code>&lt;typeAliases/&gt;</code>、设置<code>&lt;settings/&gt;</code>，mapper映射文件路径<code>&lt;mappers/&gt;</code>也可以放在这里，但更建议将所有的mapper文件都放在一个目录下，在定义<code>sqlSessionFactory</code>时通过属性<code>mapperLocations</code>指定。如mybatis.xml配置文件可以如下定义：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;

&lt;configuration&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias type="com.sohu.tv.bean.Students" alias="Students"/&gt;
    &lt;/typeAliases&gt;

    &lt;!--&lt;mappers&gt;--&gt;
        &lt;!--&lt;mapper resource="com/sohu/tv/mapper/MybatisTest.xml"/&gt;--&gt;
    &lt;!--&lt;/mappers&gt;--&gt;

&lt;/configuration&gt;
</code></pre>

<blockquote><p>类型别名是用别名来代表全限定类名，如在需要用到com.sohu.tv.bean.Students的地方，都可以使用Students来代替。</p></blockquote>

<h3>1.4 添加mapper映射文件：</h3>

<p>mapper映射文件可以定义数据库列与POJO类属性的映射，以及与dao接口类中的方法对应的JDBC执行模块，如MyBatisMapper.xml的内容为：</p>

<pre><code>&lt;mapper namespace="com.sohu.tv.dao.MyBatisTest"&gt;
    &lt;resultMap id="studentMap" type="Students"&gt;
        &lt;result column="name" property="name"/&gt;
        &lt;result column="sex" property="sex"/&gt;
        &lt;result column="number" property="number"/&gt;
        &lt;result column="enable" property="enable"/&gt;
        &lt;result column="city" property="city"/&gt;
    &lt;/resultMap&gt;

    &lt;select id="getUserNameById" parameterType="int" resultType="String"&gt;
        select name from students where id = #{id}
    &lt;/select&gt;

    &lt;select id="getStudentByNumAndCity" parameterType="map" resultMap="studentMap"&gt;
        select * from students where number = #{num} and city = #{city}
    &lt;/select&gt;

&lt;/mapper&gt;
</code></pre>

<blockquote><p><code>&lt;resultMap/&gt;</code>即定义列与属性的字段映射；<code>&lt;select/&gt;</code>中的参数和返回值的类型，既可以为基本类型，如string，int，long，也可以是map，返回类型还可以是<code>&lt;resultMap/&gt;</code>定义的映射map；如果参数类型是map，则sql中的参数名（如#{num})必须是map的key；如果返回类型为map，则sql语句中返回的列名为key；如果是基本类型，使用type，如parameterType，resultType，如果是自定义map，使用parameterMap，resultMap.</p></blockquote>

<h3>1.5 Spring配置文件的配置</h3>

<p>首先需要配置sqlSessionFactory：</p>

<pre><code>&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="feedbackDataSource"/&gt;
    &lt;property name="configLocation" value="classpath:mybatis.xml"/&gt;
    &lt;property name="mapperLocations" value="classpath:com/sohu/tv/mapper/*.xml"/&gt;
&lt;/bean&gt;
</code></pre>

<blockquote><p>属性<code>dataSource</code>引用JDBC数据源；属性<code>configLocation</code>指定mybatis配置文件的位置，配置文件中定义别名<code>&lt;typeAliases/&gt;</code>，设置<code>&lt;settings/&gt;</code>等。<code>mapperLocations</code>指定mapper映射文件的路径。有一点需要注意的是，要确保mapper映射文件被打包进classpath中，默认情况下，maven会忽略源文件中的资源文件，可以通过在pom文件中配置，使得资源文件被一起打包进classpath中；如在pom配置文件中添加：</p></blockquote>

<pre><code>&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;excludes&gt;&lt;exclude&gt;**/*.java&lt;/exclude&gt;&lt;/excludes&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>

<p>其次，需要定义与dao接口相关联的mapperFactoryBean：</p>

<pre><code>&lt;bean id="mybatisDaoImpl" class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;
    &lt;property name="mapperInterface" value="com.sohu.tv.dao.MyBatisTest"/&gt;
    &lt;property name="sqlSessionFactory" ref="sqlSessionFactory"/&gt;
&lt;/bean&gt;
</code></pre>

<blockquote><p><code>mapperInterface</code>属性的值为相关的dao接口，<code>sqlSessionFactory</code>属性引用了上述定义的sqlSessionFacotry；</p></blockquote>

<h3>1.6 service类中调用dao类实现业务逻辑</h3>

<p>在MyBatisServiceImpl.java中使用dao接口中提供的方法：</p>

<pre><code>@Resource(name = "mybatisDaoImpl")
MyBatisDao myBatisDaoImpl;

String userName = mybatisDaoImpl.getUserNameById(2);
System.out.println(userName);

Map&lt;String, Object&gt; queryMap = new HashMap&lt;String, Object&gt;();
queryMap.put("num", 333);
queryMap.put("city", "beijing");
List&lt;Students&gt; studentsList = mybatisDaoImpl.getStudentByNumAndCity(queryMap);
for (Students students: studentsList) {
    System.out.println(students.getName());
}
</code></pre>

<h3>2. 启动自动扫描注解</h3>

<p>我们可以在applicationContext.xml配置文件里为每个dao接口定义bean，但mybatis还提供了一种更简便的自动扫描注解的机制，即<code>&lt;mybatis:scan/&gt;</code>和<code>&lt;MapperScannerConfigurer/&gt;</code>。
配置<code>&lt;mybatis:scan/&gt;</code>，需要在applicationContext.xml配置文件里添加：</p>

<pre><code>&lt;mybatis:scan base-package="com.sohu.tv.dao"/&gt;
</code></pre>

<blockquote><p><code>&lt;mybatis:scan/&gt;</code>与Spring的<code>&lt;context:component-scan/&gt;</code>非常相似，<code>base-package</code>指定要扫描的包，并将包下的所有接口注册为对应的bean。命名规则：和Spring一样，如果该接口没有被注解，则bean的名称为首字母小写的非限定类名，如接口为<code>com.sohu.tv.dao.MyBatisDao</code>，则bean的名字为<code>myBatisDao</code>；如果dao接口使用了Spring的注解，如@Component或@Named等注解，并提供了bean的名称，则mybatis使用该注解的名称作为bean的名称。如将MyBatisDao接口重定义如下：</p></blockquote>

<pre><code>@Repository(value = "mybatisDao")
public interface MyBatisDao {

    public String getUserNameById(int id);

    public List&lt;Students&gt; getStudentByNumAndCity(Map&lt;String, Object&gt; queryMap);
}
</code></pre>

<blockquote><p>测试MyBatisDao被自动注解后的bean的名称为mybatisDao。建议通过注解指定bean的名称，防止类类名的变化导致了bean名称的变化；</p></blockquote>

<p>配置<code>&lt;MapperScannerConfigurer/&gt;</code>，需要在applicationContext.xml中添加：</p>

<pre><code>&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
    &lt;property name="basePackage" value="com.sohu.tv.dao"/&gt;
    &lt;property name="sqlSessionFactoryBeanName" value = "sqlSessionFactory"/&gt;
&lt;/bean&gt;
</code></pre>

<blockquote><p>这里的<code>basePackage</code>与<code>&lt;mybatis:scan/&gt;</code>的<code>base-package</code>的含义一致，bean的命名规则也是一样的，所以这两种方式等价。</p>

<p>如果启动了自动扫描注解，则在spring配置文件中不再需要dao接口的bean定义了。</p></blockquote>

<h3>3. 总结-最佳实践</h3>

<ul>
<li>mapper映射文件放在单独的目录中，统一管理，在配置<code>sqlSessionFactory</code>时，通过属性<code>mapperLocations</code>指定；</li>
<li>mybatis配置文件中只定义<code>typeAliases</code>、<code>settings</code>等配置信息；</li>
<li>Spring配置文件中，通过<code>&lt;mybatis:scan/&gt;</code>或者<code>&lt;MapperScannerConfigurer/&gt;</code>启动自动注解，并通过Spring的注解对bean命名。</li>
</ul>


<h4>参考资料：</h4>

<ul>
<li><ol>
<li><a href="http://mybatis.github.io/spring/index.html">MyBatis-Spring</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring持久化之JDBC]]></title>
    <link href="http://nkcoder.github.io/blog/20140316/spring-jdbc/"/>
    <updated>2014-03-16T18:01:26+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140316/spring-jdbc</id>
    <content type="html"><![CDATA[<p>这个小系列介绍Spring的持久化策略，主要关注当前应用最广泛的三种方式：Spring JDBC， MyBatis以及Hibernate。
使用JDBC的优劣如下：</p>

<ul>
<li>优势：相对于持久化框架，使用JDBC，不需要掌握其它框架的查询语言，允许我们在更低的层次上处理数据，能够访问数据库中单独的列，而且能够更好地对数据访问的性能进行调优。</li>
<li>劣势：随着项目的规模和复杂度的提升，使用JDBC会非常繁琐，同时不易于处理复杂的问题。</li>
<li>Spring JDBC：提供数据访问模板，简化JDBC编程，同时提供了平台无关的持久化异常体系。</li>
</ul>


<h3>1. 配置数据源</h3>

<p>在生产环境，考虑到性能，应该使用数据库连接池。以commons dbcp配置为例，配置如下：</p>

<pre><code>&lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;

&lt;bean id="vrsDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt;
    &lt;property name="driverClassName" value="${jdbc.drvier}"/&gt;
    &lt;property name="url" value="${jdbc.videodb.url}"/&gt;
    &lt;property name="username" value="${jdbc.videodb.username}"/&gt;
    &lt;property name="password" value="${jdbc.videodb.password}"/&gt;
    &lt;property name="maxActive" value="${jdbc.videodb.maxActive}"/&gt;
    &lt;property name="initialSize" value="${jdbc.videodb.initialSize}"/&gt;
&lt;/bean&gt;
</code></pre>

<blockquote><p>主要属性参数说明：</p></blockquote>

<ul>
<li>driverClassName: JDBC驱动的全限定类名，如mysql就是：com.mysql.jdbc.Driver；</li>
<li>url：JDBC的url，如使用mysql的url：jdbc:mysql://10.11.132.193:3306/vrs；</li>
<li>username, password: 连接该数据源的用户名和密码；</li>
<li>initialSize：表示初始大小，即连接池启动时创建的连接数量；</li>
<li>maxActive：表示同一时间可从池中分配的最大连接数，0表示无限制；</li>
<li>maxIdle：池里不会被释放的最大连接数，0表示无限制；</li>
<li>minIdle：在不创建新连接的情况下，池中保持空闲的最小连接数；</li>
<li>maxWait：没有可用连接时，在抛出异常之前，池等待连接回收的最大时间；-1表示无线等待；</li>
<li>validationQuery：验证连接的sql查询，至少返回一行；
更多属性参考<a href="http://commons.apache.org/proper/commons-dbcp/configuration.html">wiki页</a></li>
</ul>


<blockquote><p>其它推荐的连接池有：</p></blockquote>

<ul>
<li><a href="http://www.mchange.com/projects/c3p0/">c3p0</a>: 适合多线程环境；</li>
<li><a href="https://github.com/alibaba/druid">druid</a>：完善的监控功能；</li>
</ul>


<h3>2. 使用JdbcTemplate</h3>

<p>使用JdbcTemplate类，在sql语句中，以?作为参数的占位符，传入的参数的顺序与sql语句中?的顺序必须是一一对应的。</p>

<p>首先在xml配置文件里添加jdbcTemplate的bean，其参数<code>dataSource</code>引用之前定义的数据源：</p>

<pre><code>&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
    &lt;property name="dataSource" ref="vrsDataSource"/&gt;
&lt;/bean&gt;
</code></pre>

<p>然后，在dao类中引用JdbcTemplate类，并注入：</p>

<pre><code>@Resource(name = "jdbcTemplate")
JdbcTemplate jdbcTemplate;
</code></pre>

<p>查询
返回基本类型：</p>

<pre><code>String getUserById = "select name from students where id = ?";
String userName = jdbcTemplate.queryForObject(getUserById, new Object[]{3}, String.class);
</code></pre>

<p>返回<code>Map&lt;String, Object&gt;</code>，key为列名，value为对应列的值，此时返回值只能有一行，否则报错：</p>

<pre><code>String getStudentByNumber = "select * from students where number = ?";
Map&lt;String, Object&gt; studentMap = jdbcTemplate.queryForMap(getStudentByNumber, 111);
</code></pre>

<p>返回<code>List&lt;Map&lt;String, Object&gt;&gt;</code>, 可以返回多列：</p>

<pre><code>String getStudentsByCity = "select * from students where city = ?";
List&lt;Map&lt;String, Object&gt;&gt; studentList = jdbcTemplate.queryForList(getStudentsByCity, "tianjin");
</code></pre>

<p>返回自定义class的对象，需要实现RowMapper接口，定义列名和属性的映射：
首先实现RowMapper接口：</p>

<pre><code>public class StudentRowMapper implements RowMapper&lt;Students&gt; {
    @Override
    public Students mapRow(ResultSet rs, int rowNum) throws SQLException {
        Students students = new Students();
        students.setId(rs.getInt("id"));
        students.setName(rs.getString("name"));
        students.setSex(rs.getString("sex"));
        students.setNumber(rs.getInt("number"));
        students.setEnable(rs.getInt("enable"));
        students.setCity(rs.getString("city"));
        return students;
    }
}
</code></pre>

<p>然后，使用query或者queryForObject查询多行或一行：</p>

<pre><code>String getStudentsByCity = "select * from students where city = ?";
List&lt;Students&gt; studentsList = jdbcTemplate.query(getStudentsByCity, new StudentRowMapper(), "tianjin");
</code></pre>

<h3>2. 使用NamedParameterJdbcTemplate</h3>

<p>使用NamedParameterJdbcTemplate类，sql语句中的参数是以命名的变量来表示，传入参数时，只要参数名一致即可，索引位置不必一一对应。
首先在xml配置文件里定义NamedParameterJdbcTemplate的bean：</p>

<pre><code>&lt;bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"&gt;
    &lt;constructor-arg name="dataSource" ref="feedbackDataSource"/&gt;
&lt;/bean&gt;
</code></pre>

<p>然后将namedParameterJdbcTemplate bean注入到dao中，</p>

<pre><code>@Resource(name = "namedParameterJdbcTemplate")
NamedParameterJdbcTemplate namedParameterJdbcTemplate;
</code></pre>

<p>定义sql，参数以(:变量名)形式给出即可，如：</p>

<pre><code>String getStudentByNumber = "select * from students where number = (:number) and city = (:city)";
NamedParameterJdbcTemplate namedParameterJdbcTemplate = (NamedParameterJdbcTemplate) context.getBean("namedParameterJdbcTemplate");
Map&lt;String, Object&gt; queryMap = new HashMap&lt;String, Object&gt;();
queryMap.put("number", 333);
queryMap.put("city", "tianjin");
List&lt;Map&lt;String, Object&gt;&gt; mapList = namedParameterJdbcTemplate.queryForList(getStudentByNumber, queryMap);
</code></pre>

<blockquote><p>除了使用命名参数外，NamedParameterJdbcTemplate与JdbcTempate的主要用法都是一致的。</p></blockquote>

<h3>3. 使用JdbcDaoSupport</h3>

<p>JdbcDaoSupport是一个父类，如果有多个dao类，通过继承JdbcDaoSupport，可以更方便地获取jdbcTemplate。
首先让dao类继承JdbcDaoSupport类：</p>

<pre><code>public class InfoJdbcImpl extends JdbcDaoSupport implements VideoInfoDao {
</code></pre>

<p>然后在定义dao类的bean时，注入一个<code>jdbcTemplate</code>属性，或者直接注入一个<code>dataSource</code>属性（这两个属性来自于JdbcDaoSupport）：</p>

<pre><code>&lt;bean id="infoJdbcImpl" class="com.sohu.tv.dao.impl.InfoJdbcImpl"&gt;
    &lt;property name="dataSource" ref="feedbackDataSource"/&gt;
&lt;/bean&gt;
</code></pre>

<p>然后通过getJdbcTemplate()获取jdbcTemplate，实现dao层的逻辑：</p>

<pre><code>String getStudentByNumber = "select * from students where number = ?";
Map&lt;String, Object&gt; studentMap = getJdbcTemplate().queryForMap(getStudentByNumber, 111);
</code></pre>

<blockquote><p><code>NamedParameterJdbcDaoSupport</code>与<code>JdbcDaoSupport</code>的用法类似。</p></blockquote>

<h4>参考资料</h4>

<ul>
<li><a href="http://www.amazon.cn/Spring%E5%AE%9E%E6%88%98-%E6%B2%83%E5%B0%94%E6%96%AF/dp/B00CY6UD2I/ref=sr_1_1?ie=UTF8&amp;qid=1394943496&amp;sr=8-1&amp;keywords=spring+in+action">Spring实战(第3版)</a></li>
<li><a href="http://docs.spring.io/spring/docs/3.2.8.RELEASE/javadoc-api/">spring-javadoc-api</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP之入门实例]]></title>
    <link href="http://nkcoder.github.io/blog/20140313/spring-aop-example/"/>
    <updated>2014-03-13T22:58:06+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140313/spring-aop-example</id>
    <content type="html"><![CDATA[<p>依赖注入（DI）有助于应用对象之间的解耦，而面向切面编程（AOP）有助于横切关注点与所影响的对象之间的解耦。所谓横切关注点，即影响应用多处的功能，这些功能各个应用模块都需要，但又不是其主要关注点，常见的横切关注点有日志、事务和安全等。</p>

<p>将横切关注点抽离形成独立的类，即形成了切面。切面主要由切点和通知构成，通知定义了切面是什么，以及何时执行何种操作；切点定义了在何处执行通知定义的操作。</p>

<p>下面以简单的日志作为切面，分别介绍通过xml配置和注解实现AOP。</p>

<h3>0. 添加依赖</h3>

<p>因为Spring AOP用到AspectJ的相关对象和注解，需要添加AspectJ的依赖：</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
    &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;
    &lt;version&gt;1.7.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
    &lt;version&gt;1.7.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
    &lt;version&gt;${spring.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<h3>1. 通过XML配置实现</h3>

<p>1.1 将日志类作为切面，定义为bean即可：</p>

<pre><code>@Service("logService")
public class LogService {
    private Logger logger = LoggerFactory.getLogger(LogService.class);

    public void printLog(ProceedingJoinPoint joinPoint) throws Throwable{
        logger.info("before service is called...");

        String methodModifier = joinPoint.getSignature().getDeclaringTypeName();
        String methodName = joinPoint.getSignature().getName();
        Object[] argsArr = joinPoint.getArgs();
        logger.info("class: {}; method: {}; args: {}", methodModifier, methodName, Arrays.toString(argsArr));
        joinPoint.proceed();

        logger.info("after service is called....");
    }
}
</code></pre>

<blockquote><p>首先，通过@Service注解将类定义为bean；方法printLog的参数<code>ProceedingJoinPoint</code>对象属于<code>AspectJ</code>，通过这个对象可以获取被通知的对象和方法的信息，并通过<code>proceed</code>方法执行被通知的对象。</p></blockquote>

<p>1.2 在xml配置文件里定义切面和切点</p>

<pre><code>&lt;aop:config&gt;
    &lt;aop:aspect ref="logService"&gt;
        &lt;aop:pointcut id="serviceLog" expression="execution(* org.yousharp.service.VideoService..*(..))"/&gt;
        &lt;aop:around method="printLog" pointcut-ref="serviceLog"/&gt;
    &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre>

<blockquote><p><code>aop:aspect</code>通过ref引用<code>logService</code> bean，将<code>LogService</code>定义为切面。<code>aop:pointcut</code>定义一个切点，被通知的对象通过<code>execution</code>表达式指定，即当<code>VideoService</code>下的任意方法被执行时，触发切面。<code>aop:aroud</code>定义一个环绕通知，引用切点*serviceLog<code>，当切面被触发时，调用</code>method`指定的方法。</p></blockquote>

<h3>2. 通过注解实现</h3>

<p>通过注解，可以直接在类上定义切面、通知和切点，无需任何xml配置。</p>

<pre><code>@Service("logService")
@Aspect
public class LogService {
    private Logger logger = LoggerFactory.getLogger(LogService.class);

    @Pointcut(value = "execution(* org.yousharp.service.VideoService.saveVideoInfo(..))")
    public void saveVideo() { }

    @Around(value = "saveVideo()")
    public void printLog(ProceedingJoinPoint joinPoint) throws Throwable{
        logger.info("before service is called...");
        String methodModifier = joinPoint.getSignature().getDeclaringTypeName();
        String methodName = joinPoint.getSignature().getName();
        Object[] argsArr = joinPoint.getArgs();
        logger.info("class: {}; method: {}; args: {}", methodModifier, methodName, Arrays.toString(argsArr));
        joinPoint.proceed();

        logger.info("after service is called....");
    }
}
</code></pre>

<blockquote><p><code>@Aspect</code>注解表示将该类定义为切面，<code>@Pointcut</code>定义切点，execution表达式与xml配置一样；切点的id即为空方法的方法名（这里的方法内容不重要，主要是供切点依附），这里即为saveVideo；<code>@Around</code>表示定义环绕通知，需要引用切点。</p></blockquote>

<h4>参考资料</h4>

<ul>
<li><a href="http://www.amazon.cn/Spring%E5%AE%9E%E6%88%98-%E6%B2%83%E5%B0%94%E6%96%AF/dp/B00CY6UD2I/ref=sr_1_1?ie=UTF8&amp;qid=1394943496&amp;sr=8-1&amp;keywords=spring+in+action">Spring实战(第3版)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring依赖注入之Java注解]]></title>
    <link href="http://nkcoder.github.io/blog/20140310/spring-di-java/"/>
    <updated>2014-03-10T23:29:44+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140310/spring-di-java</id>
    <content type="html"><![CDATA[<blockquote><p>基于Java的注解，是在类级别上定义beans，在方法级别上定义bean。和自动注解一样，可以减少xml的配置。</p></blockquote>

<h3>1. xml配置</h3>

<p>在xml配置文件中添加自动扫描的配置：</p>

<pre><code>&lt;context:component-scan base-package="org.yousharp"/&gt;
</code></pre>

<blockquote><p>该配置不仅扫描构造型注解(@Controller, @Service, @Repository, @Component)，也会扫描@Configuration注解。</p></blockquote>

<h3>2. 定义dao类和service类</h3>

<p>dao类是service类的一个属性，是需要注入的对象。</p>

<pre><code>public class VideoService {
    SaveVideoInfoDao saveVideoInfoDao;

    public VideoService(){}

    public VideoService(SaveVideoInfoDao saveVideoInfoDao) {
        this.saveVideoInfoDao = saveVideoInfoDao;
    }

    public void saveVideoInfo(String info) {
        saveVideoInfoDao.printMesg(info);
    }
}

public class SaveVideoInfoDao {

    public void printMesg(String message) {
        System.out.println("saving video info....");
    }
}
</code></pre>

<blockquote><p>dao类和service类就是两个很普通的java类，没有任何注解依附。</p></blockquote>

<h3>3. 定义一个配置类</h3>

<p>单独定义一个配置类（在自动扫描包下），在类上使用@Configuration注解，在方法上使用@Bean注解：</p>

<pre><code>@Configuration
public class AppConfig {

    @Bean
    public SaveVideoInfoDao saveVideoInfoDao() {
        return new SaveVideoInfoDao();
    }

    @Bean
    public VideoService videoService() {
        VideoService videoService = new VideoService(saveVideoInfoDao());
        return videoService;
    }
}
</code></pre>

<blockquote><p>@Configuration注解等价于xml配置中的<code>beans</code>，该注解告诉Spring该类中包含一个或多个bean的定义；@Bean注解等价于xml配置中的<code>bean</code>，将方法返回的对象定义为bean，方法名为bean的id；上面第一个bean的定义等价于xml配置：</p></blockquote>

<pre><code>&lt;bean id="saveInfoDao" class="org.yousharp.AppConfig"/&gt;
</code></pre>

<p>第二个bean的定义通过构造函数实现依赖注入，其含义等价于xml配置：</p>

<pre><code>&lt;bean id="videoService" class="org.yousharp.AppConfig"&gt;
    &lt;constructor-arg name="videoService" ref="saveVideoInfoDao"&gt;
&lt;/bean&gt;
</code></pre>

<p>这里是通过构造函数实现注入，当然也可以通过setter方法实现注入。在VideoInfoService中去掉带参数的构造函数，同时对属性saveVideoInfoDao添加setter方法，修改AppConfig类中的第二个bean为：</p>

<pre><code>@Bean
public VideoService videoService() {
    VideoService videoService = new VideoService();
    videoService.setSaveVideoInfoDao(saveVideoInfoDao());
    return videoService;
}
</code></pre>

<h3>4. Controller中引用</h3>

<p>Controller里和使用xml配置bean和自动注解一样，通过bean的id获取对bean的引用。这里VideoService的bean的id为videoService。</p>

<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

public void execute() {
    VideoService videoService = (VideoService) context.getBean("videoService");
    String videoInfo = "vrs video info";
    videoService.saveVideoInfo(videoInfo);
}
</code></pre>

<h4>参考资料</h4>

<ul>
<li><a href="http://www.amazon.cn/Spring%E5%AE%9E%E6%88%98-%E6%B2%83%E5%B0%94%E6%96%AF/dp/B00CY6UD2I/ref=sr_1_1?ie=UTF8&amp;qid=1394943496&amp;sr=8-1&amp;keywords=spring+in+action">Spring实战(第3版)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
