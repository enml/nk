<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-03-18T21:28:03+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[elasticsearch查询api：term query]]></title>
    <link href="http://nkcoder.github.io/blog/20140318/elasticsearch-term-query/"/>
    <updated>2014-03-18T20:46:56+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140318/elasticsearch-term-query</id>
    <content type="html"><![CDATA[<h3>1. term query查询</h3>

<ul>
<li>在给定的字段里查询词或者词组；</li>
<li>提供的查询词是不分词的(not analyzed)，即只有完全包含才算匹配；</li>
<li>支持boost属性，boost可以提高field和document的相关性；</li>
</ul>


<h3>2. REST API</h3>

<pre><code>$ curl -XGET 'localhost:9200/video/video_info/_search?pretty' -d @term_query.json
</code></pre>

<p>term_query.json
简单的字段查询：</p>

<pre><code>{
    "query": {
        "term": {
            "tvName": "童年"
        }
    }
}
</code></pre>

<p>添加boost属性：</p>

<pre><code>{
    "query": {
        "term": {
            "tvName": {
                "value": "童年",
                "boost": 10
            }
        }
    }
}
</code></pre>

<h3>3. Java API</h3>

<pre><code>public static void termQuery() {
    String queryWord = "巨头";
    QueryBuilder queryBuilder = QueryBuilders.termQuery(ConstantUtil.FIELD_TV_NAME, queryWord)
            .boost(10);
    SearchResponse response = searchRequestBuilder.setQuery(queryBuilder)
            .setFrom(0).setSize(5).execute().actionGet();
    printResult(response);
}
</code></pre>

<h3>4. 看看Java源码</h3>

<p>以下是term_query相关的java源码：</p>

<pre><code>public static TermQueryBuilder termQuery(String name, String value) {
    return new TermQueryBuilder(name, value);
}

public static TermQueryBuilder termQuery(String name, int value) {
    return new TermQueryBuilder(name, value);
}

public TermQueryBuilder(String name, Object value) {
    this.name = name;
    this.value = value;
}

public TermQueryBuilder boost(float boost) {
    this.boost = boost;
    return this;
}
</code></pre>

<blockquote><p>从源码可以看到：termQuery方法内部都是调用TermQueryBuilder的构造函数，而TermQueryBuilder有很多重载的构造函数，最主要的就是上面的第三个函数，即第二个参数是Object类型，其它的构造函数都是调用该函数实现的。</p></blockquote>

<h4>参考资料：</h4>

<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-term-query.html">elasticsearch-guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式搜索引擎ElasticSearch安装与配置]]></title>
    <link href="http://nkcoder.github.io/blog/20140217/elasticsearch-install-config/"/>
    <updated>2014-02-17T22:49:20+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140217/elasticsearch-install-config</id>
    <content type="html"><![CDATA[<h3>1. 安装与启动</h3>

<h4>1.1 安装ElasticSearch</h4>

<blockquote><p>两种安装方式，一种是根据发行版，通过ElasticSearch提供的repositories安装，参考<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-repositories.html">官方指南</a>; 另一种是利用压缩包安装；由于第二种方式，在配置上更加灵活，这里主要介绍第二种方式的安装和配置。</p></blockquote>

<p>从<a href="http://www.elasticsearch.org/overview/elkdownloads/">ElasticSearch网站</a>下载压缩包：<code>elasticsearch-1.0.0.tar.gz</code>，解压到指定目录：</p>

<pre><code>$ wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.0.0.tar.gz -P /opt/app
$ cd /opt/app
$ tar zxvf elasticsearch-1.0.0.tar.gz -C ./
</code></pre>

<blockquote><p>启动ElasticSearch很简单，执行安装目录下bin/elasticsearch即可；ElasticSearch 1.0.0的启动机制有一些变化，默认在前台运行，-d参数表示在后台运行；另外还提供-p参数，后接文件名，保存当前ElasticSearch进程的pid，方便关闭进程；</p></blockquote>

<pre><code>$ bin/elasticsearch -d -p /tmp/es.pid
$ kill `cat /tmp/es.pid`
</code></pre>

<blockquote><p>另外还有一种启动方式，通过serviceWrapper，可以更加方便地控制ElasticSearch的启动、关闭以及重启，在下一节<code>安装插件</code>中介绍。</p></blockquote>

<h4>1.2 安装插件</h4>

<p>ElasticSearch官方和社区提供了很多插件用于将集群和节点的状态可视化。推荐安装的插件有：elasticsearch-head， marvel，bigdesk，servicewrapper</p>

<pre><code>// elasticsearch-head的安装与访问
# bin/plugin --install mobz/elasticsearch-head
http://localhost:9200/_plugin/head/

// marvel的安装与访问
# bin/plugin -i elasticsearch/marvel/latest
http://localhost:9200/_plugin/marvel

// bigdesk的安装与访问（当前不支持ElasticSearch 1.0.0）
# bin/plugin --install lukas-vlcek/bigdesk
http://localhost:9200/_plugin/bigdesk/
</code></pre>

<blockquote><p>下面介绍servicewrapper的使用：从<a href="https://github.com/elasticsearch/elasticsearch-servicewrapper">该链接</a>下载，解压后将service文件夹放到ElasticSearch安装目录下的bin目录下。</p></blockquote>

<pre><code>$ wget https://github.com/elasticsearch/elasticsearch-servicewrapper/archive/master.zip -P /opt/app
$ cd /opt/app
$ unzip elasticsearch-servicewrapper-master -d ./
$ mv elasticsearch-servicewrapper-master/service elasticsearch-1.0.0/bin/
</code></pre>

<blockquote><p>配置: 编辑elasticsearch.conf文件，主要是配置前两行：ES_HOME及ES_HEAP_SIZE</p></blockquote>

<pre><code>$ vim bin/service/elasticsearch.conf
// set.default.ES_HOME=/data/app/elasticsearch-1.0.0
// set.default.ES_HEAP_SIZE=2048
</code></pre>

<blockquote><p>用法：bin/service/elasticsearch start | stop | restart | install | remove | console | condrestart | status</p></blockquote>

<pre><code>$ bin/service/elasticsearch start
</code></pre>

<h3>2. 配置</h3>

<blockquote><p>配置文件为{ES_HOME}/config目录下的elasticsearch.yml，主要对集群、节点、索引（分片和副本）以及持久化和集群发现机制等进行参数设置。这里对一些常见的配置进行简单的说明和示例，配置文件的详细解释和说明会单独写一篇文章。</p></blockquote>

<pre><code>// 集群的名称，用于集群内节点的自动发现
cluster.name: es-test

// 节点的名称，标识一个节点
node.name: node_79_75

// 可以被选为主节点，同时可以存储数据
node.master: true
node.data: true

//节点的分片和副本的数量
index.number_of_shards: 3
index.number_of_replicas: 1

// 配置文件、索引数据以及日志和插件等的目录，如果不存在，新建即可
path.conf: /data/app/elasticsearch-1.0.0/config
path.data: /data/app/elasticsearch-1.0.0/data
path.logs: /data/app/elasticsearch-1.0.0/logs
path.plugins: /data/app/elasticsearch-1.0.0/plugins

// 锁定内存，防止内存交换影响ES性能
bootstrap.mlockall: true

// 持久化策略，本次存储
gateway.type: local

// 启用单播，显式指定节点的发现，当节点不在同一网段，无法自动发现时，启动单播，指定要发现的节点列表
// 比如当前节点的ip为10.10.79.75，与另两个节点不在同一网段，使用单播机制
discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: ["10.11.52.131:9300", "10.11.52.134:9300"]
</code></pre>

<h4>参考</h4>

<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index.html">ElasticSearch reference</a></li>
<li><a href="http://www.searchtech.pro/articles/2013/02/18/1361194291548.html">ElasticSearch配置文件详解</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
