<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术之外 | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/ji-zhu-zhi-wai/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-03-16T18:10:10+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014-01-11 日记]]></title>
    <link href="http://nkcoder.github.io/blog/20140111/diary/"/>
    <updated>2014-01-11T23:13:35+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140111/diary</id>
    <content type="html"><![CDATA[<p>今天是个周六，按照我们码农的习惯，至少得中午起吧，洗洗直接吃个午饭。可我就没这么好的命啦，每天早上8点前得给我的部门老大发系统值班的报告（为什么呢？简而言之，就是这个系统在我接手之前，出过几次故障，本来也不是什么大事，关键是这几次故障都是被公司的张老大第一个亲自发现的，那问题就严重了，直接导致我现在的部门老大那是谨小慎微啊，我也是如履薄冰啊，幸好到现在为止，还没出过什么事），周末也不例外。不过由此带来的一个“副作用”就是，我每天7点左右起，完成值班报告，总不能回去继续睡个回笼觉吧，正好可以用来看看书，或者读读英语，现在都养成习惯了，算是额外的一个收获吧。</p>

<p>早上也没什么异常报警，照例看看系统的各个页面以及日志是否正常。当看到频道页的一个榜单时，感觉不对劲，我立马知道问题处在哪儿了。这是前两天产品提的一个需求，需要前端和后台配合，我开发完了，将文件推送到cms的测试目录，将测试地址给了产品经理；然后，前端找产品经理要文件地址，产品经理把测试地址给了前端，后来前端说，她是找产品要的地址，调试完了直接上线了（引用的测试地址，因为线上的文件是当天生成的，而测试地址的是旧文件），关键是她上线时候，至少应该通知我或者产品一声的，而且我给的地址里明显含有test关键字，于是我就很郁闷。大周末的，谁都找不着，产品说周一再说吧。但排行榜是我的系统，出问题，我是首当其冲。跟我主管知会了一下，他也很郁闷，没办法，我只能默默地将系统上线，更新文件，然后推送到测试地址，以保证系统的展示是正常的。开发、产品和前端如果沟通不好，真的很容易出问题，有了这次的教训，以后不能单线和前端或者产品沟通，必须大家都在，把问题说清楚。</p>

<p>中午找个地方吃完饭，去公司加班了，还有点活。到公司一看，发现Xi Chen也在，每一会儿，主管也来了，好么，今天是组内加班聚会么。下午快要下班的时候，主管要上线个系统，让我帮忙做个code review（此时Xi Chen提前撤了），当然ok。其实所谓code review，就是听开发者在代码级讲解一遍系统的逻辑、功能和实现，主要是check一下逻辑是否严密，是否有没有考虑到的问题，或者由于粗心将代码写串了等编码问题。我觉得code review 还是很有必要的，开发者在开发的过程中，或者由于系统功能较复杂，或者由于编码周期比较长，代码量较大，容易遗漏问题。通过将思路和逻辑讲给同事听（也许他不一定对系统多么熟悉），相当于捋一遍思路，有的时候自己就能发现，噢，原来这个地方还有个问题没有考虑到呢；另一方面，同事也可以根据自己的理解和经验提出疑问，通过解答疑问，使得逻辑更加严密。</p>

<p>其实今天做code review的时候，就有一个小问题被我发现了：通过PreparedStatement的executeBatch()方法，批处理向数据库插入数据，示例代码如下：</p>

<pre><code><div class="highlight"><pre><code class="java"><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="n">PreparedStatement</span> <span class="n">statement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">database</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
    <span class="n">statement</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatment</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">VideoInfo</span> <span class="nl">info:</span> <span class="n">videoInfoList</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">statement</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">info</span><span class="o">.</span><span class="na">getVid</span><span class="o">());</span>
        <span class="n">statement</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">info</span><span class="o">.</span><span class="na">getTvName</span><span class="o">());</span>
        <span class="c1">// ...</span>

        <span class="k">if</span> <span class="o">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">statement</span><span class="o">.</span><span class="na">executeBatch</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">statemetn</span><span class="o">.</span><span class="na">executeBatch</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="c1">// ...) {</span>
    <span class="c1">//  ...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div>
</code></pre>

<p>讲解到这段代码时，我试探性地问，有没有加入批处理的操作，主管一看，哦，对，写漏了一句：statement.addBatch();赶紧补上，我们相视一笑。其实，我还从来没在代码里是用过mysql的批处理api，我之所以会有疑问，是因为我在学习<a href="http://www.elasticsearch.org/">ElasticSearch</a>的时候，使用过其批量导数据的接口，和上述代码如出一辙，这也让我感叹，很多知识都是相通的，在一些好的方面，也是相互借鉴的。这也让我坚信，知识的广度是多么地重要。</p>
]]></content>
  </entry>
  
</feed>
