<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memcached | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/memcached/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-02-14T16:25:01+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[memcached专题：相关依赖资源-libevent-repcached]]></title>
    <link href="http://nkcoder.github.io/blog/20140213/memcached-resource-libevent-repcached/"/>
    <updated>2014-02-13T23:17:23+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140213/memcached-resource-libevent-repcached</id>
    <content type="html"><![CDATA[<h3>1. <code>memcached</code></h3>

<pre><code># yum info memcached
</code></pre>

<p>如果发行版自带的memcached版本太旧，进入<a href="https://code.google.com/p/memcached/">memcached网站</a>, 下载源码自己安装，当前最新版本位1.4.15.</p>

<h3>2. <code>libevent-devel</code></h3>

<pre><code># yum info libevent libevent-devel
</code></pre>

<p>如果yum安装的版本太旧，进入<a href="https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz">libevent网站</a>，下载源码自行安装，当前最新版本位2.0.21</p>

<h3>3. <code>repcached</code></h3>

<p>一种是补丁，一种是与memcached集成版。</p>

<p>集成版<a href="https://github.com/mdounin/memcached/tree/repcached">下载地址</a>（最新支持1.4.13）</p>

<p>补丁版<a href="http://mdounin.ru/files/repcached-2.3.1-1.4.13.patch.gz">下载地址</a> 或者<a href="https://github.com/usecide/repcached/">这里</a>；repcached的<a href="http://repcached.lab.klab.org/">官方网站</a>，但是好久没更新了。</p>

<p>安装请参考前一篇博文：<a href="http://nkcoder.github.io/blog/20140213/memcached-install-libevent-repcached-memcached/">Memcached安装libevent-repcached-memcached</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached专题：安装libevent-repcached-memcached]]></title>
    <link href="http://nkcoder.github.io/blog/20140213/memcached-install-libevent-repcached-memcached/"/>
    <updated>2014-02-13T07:58:41+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140213/memcached-install-libevent-repcached-memcached</id>
    <content type="html"><![CDATA[<blockquote><p>安装顺序：</p></blockquote>

<pre><code>1. 先安装libevent，因为memcached依赖它；
2. 给memcached打上repcached补丁，支持主从结构，实现高可用；
3. 安装memcached，启用replication；
</code></pre>

<h3>1. libevent</h3>

<pre><code># wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz -P /opt/softs/
# ./configure --prefix=/usr/local/
# make &amp;&amp; make install
</code></pre>

<h3>2. repcached &amp;&amp; memcached</h3>

<p>当前补丁最新位1.4.13，memcached的版本应该一直，否则会出现异常；</p>

<pre><code># wget https://memcached.googlecode.com/files/memcached-1.4.13.tar.gz -P /opt/softs/
# wget http://mdounin.ru/files/repcached-2.3.1-1.4.13.patch.gz -P ./

# tar zxvf memcached-1.4.13.tar.gz -C /opt/softs/
# gzip -d repcached-2.3.1-1.4.13.patch.gz

# cd /opt/softs/memcached-1.4.13
# patch -p1 -i ../repcached-2.3.1-1.4.13.patch
# ./configure --prefix=/usr/local/ --with-libevent=/usr/local/ --enable-replication
# make &amp;&amp; make install
</code></pre>

<h3>3. memcached (with repcached) 主从测试</h3>

<p>在本机的两个不同的端口上启动两个memcached实例，一主一从，然后测试相互之间的数据同步。
memcached主从测试在本机的两个不同的端口上启动两个memcached实例，一主一从，然后测试相互之间的数据同步。</p>

<h4>3.1 启动两个memcached实例</h4>

<pre><code># memcached -d -m -p 11211 -u nobody -l 127.0.0.1 -x 127.0.0.1 -X 11222 -P /tmp/localhost_master.pid -vv
# memcached -d -m -p 11212 -u nobody -l 127.0.0.1 -x 127.0.0.1 -X 11222 -P /tmp/localhost_slave.pid -vv
</code></pre>

<blockquote><p>两个实例的端口分别为11211和11212，共同的监听端口为11222。</p></blockquote>

<h4>3.2 通过telnet测试数据的同步</h4>

<blockquote><p>进入master，set两个值</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11211
Trying 127.0.0.1...
&lt;31 new auto-negotiating client connection
Connected to 127.0.0.1.
Escape character is '^]'.
set city 0 0 7
31: Client using the ascii protocol
&lt;31 set city 0 0 7
tianjin
&gt;31 STORED
replication: pop
replication: pop
STORED
set city2 0 0 7
&lt;31 set city2 0 0 7
beijing
&gt;31 STORED
replication: pop
replication: pop
STORED  
</code></pre>

<blockquote><p>进入slave，get刚才设置的值，并删除其中一个值</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11212
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '^]'.
get city
VALUE city 0 7
tianjin
END
get city2
VALUE city2 0 7
beijing
END
delete city2
&lt;26 delete city2
REP&gt;26 DELETED
DELETED
</code></pre>

<blockquote><p>再次进入master，获取set的两个值，删除的数据是否可以get</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11211
Trying 127.0.0.1...
&lt;31 new auto-negotiating client connection
Connected to 127.0.0.1.
Escape character is '^]'.
get city
31: Client using the ascii protocol
&lt;31 get city
&gt;31 sending key city
&gt;31 END
VALUE city 0 7
tianjin
END
get city2
&lt;31 get city2
&gt;31 END
END
</code></pre>
]]></content>
  </entry>
  
</feed>
