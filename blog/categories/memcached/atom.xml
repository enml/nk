<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memcached | You Sharp]]></title>
  <link href="http://nkcoder.github.io/blog/categories/memcached/atom.xml" rel="self"/>
  <link href="http://nkcoder.github.io/"/>
  <updated>2014-03-30T18:40:34+08:00</updated>
  <id>http://nkcoder.github.io/</id>
  <author>
    <name><![CDATA[lingguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xmemcached主要用法及与Spring集成]]></title>
    <link href="http://nkcoder.github.io/blog/20140216/xmemcached-usage-with-spring/"/>
    <updated>2014-02-16T21:35:36+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140216/xmemcached-usage-with-spring</id>
    <content type="html"><![CDATA[<p>xMemcached是memcached的一个java客户端，基于java nio，支持memcached的所有协议。本文简要介绍xMemcached的基本用法，以及与Spring的集成配置。</p>

<h3>xMemcached的主要方法示例</h3>

<p>```java</p>

<pre><code>/**
 * XMemcachedClientBuilder是MemcachedClientBuilder的一个实现类，XMemcachedClient是MemcachedClient的一个实现类；
 * 在实际使用中，应该使用接口，利用多态特性，这里直接使用实现类，是为了方便查看实现类的源码。
 */
/**
 * MemcachedClientBuilder builder = new XMemcachedClientBuilder(AddrUtil.getAddresses("192.168.56.200:11211"));
 * MemcachedClient memcachedClient = null;
 */

XMemcachedClientBuilder builder = new XMemcachedClientBuilder(AddrUtil.getAddresses("192.168.56.200:11211 192.168.56.200:11212"));
XMemcachedClient xMemcachedClient = null;

// 注意处理相关异常

// 默认是采用余数哈希，可以修改为一致性哈希
builder.setSessionLocator(new KetamaMemcachedSessionLocator());
// 启用二进制协议，getAndTouch等方法仅在二进制协议中支持
builder.setCommandFactory(new BinaryCommandFactory());

// build the memcached client
xMemcachedClient = (XMemcachedClient) builder.build();

// set: 第一个参数是key，第二个参数是超时时间，第三个参数是value
xMemcachedClient.set("first", 0, "tianjin");
xMemcachedClient.add("second", 20, "chengdu");
xMemcachedClient.replace("first", 0, "Beijing");

// get：根据key获取value，第一个参数为key，第二个为超时；
String firstValue = xMemcachedClient.get("first", new StringTranscoder());
logger.info("get first value: {}", xMemcachedClient.get("first"));

// delete: 删除item
xMemcachedClient.delete("second");
xMemcachedClient.set("third", 20, "xian");
xMemcachedClient.deleteWithNoReply("third");

// touch：修改item过期时间
xMemcachedClient.touch("first", 0);
firstValue = xMemcachedClient.getAndTouch("first", 10);
logger.info("getAndTouch op, first value: {}", firstValue);

// append, prepend: 追加数据
xMemcachedClient.append("first", ", come on");
xMemcachedClient.prepend("first", "hello ");
logger.info("append and prepend op, first value: {}", xMemcachedClient.get("first"));

/**
 * cas: 通过gets操作返回GetResponse，其中包括value值和cas值
 */
GetsResponse&lt;String&gt; response = xMemcachedClient.gets("first");
long cas = response.getCas();
if (!xMemcachedClient.cas("first", 0, "guangzhou", cas)) {
    logger.info("cas error");
}

// cas: 重试更方便；第一个方法表示重试次数，第二个方法表示更新的值
xMemcachedClient.cas("first", 0, new CASOperation&lt;String&gt;() {
    @Override
    public int getMaxTries() {
        return 1;
    }

    @Override
    public String getNewValue(long currentCAS, String currentValue) {
        return "xian";
    }
});
logger.info("cas op, first value: {}", xMemcachedClient.get("first"));

// incr/decr: 值的增加减少
xMemcachedClient.incr("id", 3, 0);
xMemcachedClient.incr("id", 5);
xMemcachedClient.decr("id", 2);
logger.info("incr/decr op, value: {}", xMemcachedClient.get("id"));

// namespace: set时指定命名空间，get时也需要指定，可以使命名空间中的所有items失效
String nsSohu = "sohu";
xMemcachedClient.withNamespace(nsSohu, new MemcachedClientCallable&lt;Object&gt;() {
    @Override
    public Object call(MemcachedClient client) throws MemcachedException, InterruptedException, TimeoutException {
        client.set("typeTv", 0, "tv");
        client.set("typeMv", 0, "mv");
        client.set("typeDrama", 0, "drama");
        return null;
    }
});

logger.info("namespace op, typeTv: {}", xMemcachedClient.withNamespace(nsSohu, new MemcachedClientCallable&lt;String&gt;() {
    @Override
    public String call(MemcachedClient client) throws MemcachedException, InterruptedException, TimeoutException {
        return client.get("typeTv");
    }
}));
xMemcachedClient.invalidateNamespace(nsSohu);

// stats: 获取统计，也可以根据items获取统计
Map&lt;InetSocketAddress, Map&lt;String, String&gt;&gt; stats = xMemcachedClient.getStats();
for (InetSocketAddress addr: stats.keySet()) {
    logger.info("stats map: {}: {}", addr, stats.get(addr).toString());
}

// flush_all: 是所有item都过期
xMemcachedClient.flushAll("192.168.56.200:11211");

// 删除一个server
xMemcachedClient.removeServer("192.168.56.200:11212");
</code></pre>

<p>```</p>

<h3>xMemcached与Spring集成</h3>

<blockquote><p>applicationContext.xml的配置：</p></blockquote>

<p>```java</p>

<pre><code>&lt;!--定义一个server--&gt;
&lt;bean name="server1" class="java.net.InetSocketAddress"&gt;
    &lt;constructor-arg&gt;&lt;value&gt;192.168.56.200&lt;/value&gt;&lt;/constructor-arg&gt;
    &lt;constructor-arg&gt;&lt;value&gt;11211&lt;/value&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!--定义XMemcachedClientBuilder实例，第一个参数设置server，第二个参数设置权重--&gt;
&lt;bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder"&gt;
    &lt;constructor-arg&gt;
        &lt;list&gt;
            &lt;bean class="java.net.InetSocketAddress"&gt;
                &lt;constructor-arg&gt;&lt;value&gt;192.168.56.200&lt;/value&gt;&lt;/constructor-arg&gt;
                &lt;constructor-arg&gt;&lt;value&gt;11211&lt;/value&gt;&lt;/constructor-arg&gt;
            &lt;/bean&gt;
            &lt;bean class="java.net.InetSocketAddress"&gt;
                &lt;constructor-arg&gt;&lt;value&gt;192.168.56.200&lt;/value&gt;&lt;/constructor-arg&gt;
                &lt;constructor-arg&gt;&lt;value&gt;11212&lt;/value&gt;&lt;/constructor-arg&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/constructor-arg&gt;
    &lt;constructor-arg&gt;
        &lt;list&gt;
            &lt;value&gt;1&lt;/value&gt;
            &lt;value&gt;2&lt;/value&gt;
        &lt;/list&gt;
    &lt;/constructor-arg&gt;

    &lt;!--&amp;lt;!&amp;ndash;设置验证信息&amp;ndash;&amp;gt;--&gt;
    &lt;!--&lt;property name="authInfoMap"&gt;--&gt;
        &lt;!--&lt;map&gt;--&gt;
            &lt;!--&lt;entry key-ref="server1"&gt;--&gt;
                &lt;!--&lt;bean class="net.rubyeye.xmemcached.auth.AuthInfo" factory-method="typical"&gt;--&gt;
                    &lt;!--&lt;constructor-arg index="0"&gt;&lt;value&gt;index&lt;/value&gt;&lt;/constructor-arg&gt;--&gt;
                    &lt;!--&lt;constructor-arg index="1"&gt;&lt;value&gt;index-pd&lt;/value&gt;&lt;/constructor-arg&gt;--&gt;
                &lt;!--&lt;/bean&gt;--&gt;
            &lt;!--&lt;/entry&gt;--&gt;
        &lt;!--&lt;/map&gt;--&gt;
    &lt;!--&lt;/property&gt;--&gt;

    &lt;!--设置线程池--&gt;
    &lt;property name="connectionPoolSize" value="2"&gt;&lt;/property&gt;

    &lt;!--使用二进制协议--&gt;
    &lt;property name="commandFactory"&gt;
        &lt;bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"&gt;&lt;/bean&gt;
    &lt;/property&gt;

   &lt;!--设置序列化方式--&gt;
    &lt;property name="transcoder"&gt;
        &lt;bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"&gt;&lt;/bean&gt;
    &lt;/property&gt;

    &lt;!--设置一致性哈希--&gt;
    &lt;property name="sessionLocator"&gt;
        &lt;bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"&gt;&lt;/bean&gt;
    &lt;/property&gt;

&lt;/bean&gt;

&lt;!--定义memcachedClient，通过memcachedClientBuilder的build方法--&gt;
&lt;bean name="memcachedClient" factory-bean="memcachedClientBuilder"
      factory-method="build" destroy-method="shutdown"&gt;
&lt;/bean&gt;
</code></pre>

<p>```</p>

<blockquote><p>java测试类：</p></blockquote>

<p>```java</p>

<pre><code>MemcachedClient memcachedClient = null;
ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml");
try {
    memcachedClient = (MemcachedClient) applicationContext.getBean("memcachedClient");
    memcachedClient.set("spring", 0, "3.0.0.RELEASE");
    logger.info("spring: {}", memcachedClient.get("spring"));
    memcachedClient.replace("spring", 0, "4.0.0.RELEASE is coming");
    logger.info("spring, {}", memcachedClient.get("spring"));
} catch (Exception e) {
    logger.info("spring test", e);
}
</code></pre>

<p>```</p>

<h4>参考</h4>

<ul>
<li><a href="https://code.google.com/p/xmemcached/wiki/User_Guide_zh">xmemcached user_guide_zh</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached用法：参数和命令详解]]></title>
    <link href="http://nkcoder.github.io/blog/20140215/memcached-usage-parameters-commands/"/>
    <updated>2014-02-15T23:02:36+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140215/memcached-usage-parameters-commands</id>
    <content type="html"><![CDATA[<h3>1. memcached 参数说明：</h3>

<pre><code># memcached -h
</code></pre>

<h4>1.1 memcached 的参数</h4>

<p>常用参数</p>

<pre><code>-p &lt;num&gt; 监听的TCP端口号，默认是11211；（port）
-l &lt;addr&gt; 监听的主机地址，默认是INADDR_ANY，即所有地址，&lt;addr&gt;可以是host:port的形式，如果没有指定port，则使用-p或者-U的值；可以指定多个地址，以逗号分隔或者多次使用-l参数；尽量不要使用默认值，有安全隐患。(listen)
-d 以守护进程运行 (daemon)
-u &lt;username&gt; 指定进程的所有者（只有以root用户执行时才可以使用该参数）(username)
-m &lt;num&gt; 用于存储数据的最大内存，单位是MB，默认是64MB；(memory)
-c &lt;num&gt; 最大并发连接数，默认是1024；
-vv 显示更详细的信息（还显示客户端的命令和响应）
-vvv 显示最详细的信息（还显示内部的状态转变）
-h 显示帮助信息
-P &lt;file&gt; 将PID保存到&lt;file&gt;中，仅和-d参数一起使用；
-f &lt;factor&gt; chunk的增幅因子，默认是1.25，不同的slab class，slab page大小相同，但是chunk大小不等，chunk的大小根据这个增幅因子增长；(factor)
-n &lt;bytes&gt; 为key+value+flags分配的最小内存，单位bytes，默认是48；chunk数据结构本身要占据48字节，所以实际大小是n+48；
-t &lt;num&gt; 使用多少个线程，默认是4；（thread）
-I 设置slab page的大小，即设置可以保存的item的最大值，默认1MB，最小是1K，最大值128M；
</code></pre>

<p>其它参数</p>

<pre><code>-U &lt;num&gt; 监听的UDP端口号，默认是11211，0表示关闭UDP监听；（UDP）
-s &lt;file&gt; 要监听的UNIX socket路径（禁用网络支持）（socket)
-a &lt;mask&gt; UNIX socket的访问掩码（access mask），八进制表示，默认是0700. (mask)
-r 文件数量的最大值 (rlimit)
-M 内存耗尽时返回错误，而不是通过LRU淘汰内容；
-k 锁定所有页内存；允许被锁定的内存是有限制的，超过限制可能会失败。
-v 显示启动信息（错误和警告信息）(verbose)
-i 显示memcached和libevent的licence信息
-L 一次申请大的内存页（如果可以）；增大内存页的大小，可以提高性能；
-D &lt;char&gt; 指定key前缀与ID的分隔符，用于stats信息显示，默认是冒号：，如果使用了该参数，则stats收集自动启用了，否则，需要发送命令“stats detail on”命令来启动stats的收集。
-R 每一个事件（event）的最大请求数，限制最大请求数可以防止线程饥饿，默认是20；
-C 禁用CAS；
-b 设置backlog队列限制，默认1024；
-B 指定绑定协议，ascii，binary或者auto，其中auto是默认值；
</code></pre>

<h4>1.2 repcached的参数：</h4>

<pre><code>-x &lt;ip_addr&gt; peer主机的主机名或者ip地址；
-X peer主机的TCP端口，即主从同步端口，共同的监听端口
</code></pre>

<h4>1.3 常用的参数组合</h4>

<pre><code># memcached -d -m -p 11212 -u nobody -l 127.0.0.1 -x 127.0.0.1 -X 11222 -P /tmp/localhost_slave.pid -vv
</code></pre>

<h3>2. 基本命令与操作</h3>

<h4>2.1 存储的命令</h4>

<p>主要有：set，add，replace，append，prepend，cas；格式为：</p>

<pre><code>command key flag expiration_time bytes
value
</code></pre>

<blockquote><p>key表示键，flag表示key/value的额外信息，expiration_time表示过期时间，单位为秒，0表示永不过期，bytes表示值所占的字节数，必须完全匹配，value表示key对应的值，总是出现在第二行。</p>

<p>set命令表示存储一个key/value对，如果该key已存在，则更新对应的value值；如果成功，返回STORED。</p></blockquote>

<pre><code>set file_path 0 0 5
/opt/
&lt;29 rep file_path 0 0 5 12
REP&gt;29 STORED
STORED
</code></pre>

<blockquote><p>add命令也表示增加key/value，如果key/value已存在，add操作失败；保存成功返回STORED，失败返回NOT_STORED。</p></blockquote>

<pre><code>add file_path 0 60 5
/opt/
NOT_STORED
add file_suffix 0 0 2
js
&lt;29 rep file_suffix 0 0 2 16
REP&gt;29 STORED
STORED
</code></pre>

<blockquote><p>replace命令表示更新key对应的value值，如果key/value不存在，replace操作失败；成功返回STORED，失败返回NOT_STORED；</p></blockquote>

<pre><code>replace first 0 0 7
tianjin
STORED
replace second 0 0 8
shanghai
NOT_STORED
</code></pre>

<blockquote><p>append表示在key对应的value值后追加数据，key必须已存在，否则操作失败；成功返回STORED，失败返回NOT_STORED；</p></blockquote>

<pre><code>append second 0 0 8
shanghai
NOT_STORED
append first 0 0 3
 go
STORED
</code></pre>

<blockquote><p>prepend在key对应的value值的前面追加数据，key必须已存在，否则操作失败；成功返回STORED，失败返回NOT_STORED；</p></blockquote>

<pre><code>prepend second 0 0 2
hi
NOT_STORED
prepend first 0 0 2
hi
STORED
get first
VALUE first 0 15
hitianjin go go
END
</code></pre>

<blockquote><p>cas (check and set)：先比较后存储，即原子更新，原理类似于乐观所。每次请求存储某个数据时附带一个cas值，memcached比对这个cas值与当前存储数据的cas值是否相等，如果相等，则更新数据，否则操作失败；当前存储的cas值通过gets命令获取。成功返回STORED，失败返回EXISTS。</p></blockquote>

<pre><code>gets first
VALUE first 0 7 12      // 12表示cas id，可以理解为版本号
chengdu
END
cas first 0 0 8 10      // 10 != 12，cas失败
shanghai
EXISTS
cas first 0 0 8 12      // 12表示gets后没有修改key的值，因此可以set
shanghai
STORED
</code></pre>

<h4>2.2 读取的命令</h4>

<blockquote><p>get根据key获取value值；可以获取多个key的值；get key | get key1 key2</p></blockquote>

<pre><code>get first
VALUE first 0 8
shanghai
END

get first fine
VALUE first 0 8
shanghai
VALUE fine 0 5
yes!!
END
</code></pre>

<blockquote><p>gets是与cas一起使用的命令，gets会额外返回一个cas值，可以理解为版本；如果最后一次gets后，该cas值改变了，则cas设置的值不会存储；gets key | gets key1 key2</p></blockquote>

<pre><code>gets first
VALUE first 0 8 13
shanghai
END
set first 0 0 7
chengdu
STORED
cas first 0 0 7 13      // 因为gets后set了，所以cas id改变了，cas失败
chengdu
EXISTS
</code></pre>

<blockquote><p>delete命令删除key/value对，一次只能删除一个key/value对；如果要删除的key不存在，操作失败: delete key</p></blockquote>

<pre><code>delete first second
CLIENT_ERROR bad command line format.  Usage: delete &lt;key&gt; [noreply]
delete first
DELETED
</code></pre>

<blockquote><p>incr/decr: 如果key的value值表示的是一个64位整数，可以通过incr和decr命令进行数值的增减: incr/decr key num</p></blockquote>

<pre><code>set id 0 120 2
10
STORED
incr id 10
20
decr id 5
15
</code></pre>

<h4>2.3 统计的命令</h4>

<blockquote><p>stats显示进程及当前状态等信息。</p></blockquote>

<pre><code>stats 
STAT pid 1224           // 进程id
STAT uptime 30385       // 系统运行的事件，单位：秒
STAT time 1392199633    // 系统当前事件，Unix时间戳表示的时间：2/12/2014 6:25:40 PM
STAT version 1.4.13         // memcached版本
STAT libevent 2.0.21-stable // libevent版本
STAT pointer_size 64        // 操作系统字大小（64位）
STAT rusage_user 1.892712   // 进程累计用户时间
STAT rusage_system 0.996848 // 进程累计系统时间
STAT curr_connections 8     // 当前打开的连接数
STAT total_connections 9    // 曾打开的连接总数
STAT connection_structures 9    // 服务器分配的连接结构数
STAT reserved_fds 20
STAT cmd_get 29             // 执行get命令的总数
STAT cmd_set 29             // 执行set命令的总数
STAT cmd_flush 2            // 执行flush_all命令的总数
STAT cmd_touch 0             
STAT get_hits 14            
STAT get_misses 15          
STAT delete_misses 3        
STAT delete_hits 3
STAT incr_misses 0
STAT incr_hits 4
STAT decr_misses 0
STAT decr_hits 2
STAT cas_misses 1
STAT cas_hits 2
STAT cas_badval 2
STAT touch_hits 0
STAT touch_misses 0
STAT auth_cmds 0
STAT auth_errors 0
STAT bytes_read 1503
STAT bytes_written 4125
STAT limit_maxbytes 134217728
STAT accepting_conns 1
STAT listen_disabled_num 0
STAT threads 4              // 线程数
STAT conn_yields 0
STAT hash_power_level 16
STAT hash_bytes 524288
STAT hash_is_expanding 0
STAT expired_unfetched 0
STAT evicted_unfetched 0
STAT replication MASTER
STAT repcached_version 2.3.1
STAT repcached_qi_free 8191
STAT bytes 217              // 存储的item字节数
STAT curr_items 3           // 当前item数量
STAT total_items 25         // item的总数
STAT evictions 0            // 为获取空间删除的item数量
STAT reclaimed 2
END
</code></pre>

<blockquote><p>stats items 显示items的相关信息</p></blockquote>

<pre><code>stats items
STAT items:1:number 3
STAT items:1:age 1552
STAT items:1:evicted 0
STAT items:1:evicted_nonzero 0
STAT items:1:evicted_time 0
STAT items:1:outofmemory 0
STAT items:1:tailrepairs 0
STAT items:1:reclaimed 2
STAT items:1:expired_unfetched 0
STAT items:1:evicted_unfetched 0
END
</code></pre>

<blockquote><p>stats slabs 显示slab的相关信息</p></blockquote>

<pre><code>stats slabs
STAT 1:chunk_size 96
STAT 1:chunks_per_page 10922
STAT 1:total_pages 1
STAT 1:total_chunks 10922
STAT 1:used_chunks 3
STAT 1:free_chunks 0
STAT 1:free_chunks_end 10919
STAT 1:mem_requested 217
STAT 1:get_hits 14
STAT 1:cmd_set 29
STAT 1:delete_hits 3
STAT 1:incr_hits 4
STAT 1:decr_hits 2
STAT 1:cas_hits 2
STAT 1:cas_badval 2
STAT 1:touch_hits 0
STAT active_slabs 1
STAT total_malloced 1048512
END
</code></pre>

<blockquote><p>stats sizes</p></blockquote>

<pre><code>stats sizes
STAT 96 3
END
</code></pre>

<blockquote><p>stats cachedump 显示slab中items的信息(该命令在将来可能不再支持）：stats cachedump [slab id] [number of items, 0 for all items]</p></blockquote>

<pre><code>set city 0 0 7
tianjin
STORED
stats cachedump 1 0
ITEM city [7 b; 1392169248 s]
END
get city
VALUE city 0 7
tianjin
END
</code></pre>

<blockquote><p>flush_all 使cache中的所有items都过期，server不会停止，也不会刷新或者释放内存。</p></blockquote>

<pre><code>flush_all
OK
get first
END
</code></pre>

<h4>参考</h4>

<ul>
<li><a href="https://code.google.com/p/memcached/wiki/NewStart">memcached wiki</a></li>
<li><a href="http://www.zrwm.com/?p=642">memcached命令行操作</a></li>
<li><a href="http://blog.csdn.net/wanghai__/article/details/8539435">memcached命令行参数说明</a></li>
<li><a href="http://freeloda.blog.51cto.com/2033581/1289806">memcached详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached安装: libevent-repcached-memcached]]></title>
    <link href="http://nkcoder.github.io/blog/20140213/memcached-install-libevent-repcached-memcached/"/>
    <updated>2014-02-13T07:58:41+08:00</updated>
    <id>http://nkcoder.github.io/blog/20140213/memcached-install-libevent-repcached-memcached</id>
    <content type="html"><![CDATA[<blockquote><p>安装顺序：</p></blockquote>

<pre><code>1. 先安装libevent，因为memcached依赖它；
2. 给memcached打上repcached补丁，支持主从结构，实现高可用；
3. 安装memcached，启用replication；
</code></pre>

<h3>1. libevent</h3>

<pre><code># wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz -P /opt/softs/
# ./configure --prefix=/usr/local/
# make &amp;&amp; make install
</code></pre>

<h3>2. repcached &amp;&amp; memcached</h3>

<p>当前补丁最新位1.4.13，memcached的版本应该一直，否则会出现异常；</p>

<pre><code># wget https://memcached.googlecode.com/files/memcached-1.4.13.tar.gz -P /opt/softs/
# wget http://mdounin.ru/files/repcached-2.3.1-1.4.13.patch.gz -P ./

# tar zxvf memcached-1.4.13.tar.gz -C /opt/softs/
# gzip -d repcached-2.3.1-1.4.13.patch.gz

# cd /opt/softs/memcached-1.4.13
# patch -p1 -i ../repcached-2.3.1-1.4.13.patch
# ./configure --prefix=/usr/local/ --with-libevent=/usr/local/ --enable-replication
# make &amp;&amp; make install
</code></pre>

<h3>3. memcached (with repcached) 主从测试</h3>

<p>在本机的两个不同的端口上启动两个memcached实例，一主一从，然后测试相互之间的数据同步。
memcached主从测试在本机的两个不同的端口上启动两个memcached实例，一主一从，然后测试相互之间的数据同步。</p>

<h4>3.1 启动两个memcached实例</h4>

<pre><code># memcached -d -m -p 11211 -u nobody -l 127.0.0.1 -x 127.0.0.1 -X 11222 -P /tmp/localhost_master.pid -vv
# memcached -d -m -p 11212 -u nobody -l 127.0.0.1 -x 127.0.0.1 -X 11222 -P /tmp/localhost_slave.pid -vv
</code></pre>

<blockquote><p>两个实例的端口分别为11211和11212，共同的监听端口为11222。</p></blockquote>

<h4>3.2 通过telnet测试数据的同步</h4>

<blockquote><p>进入master，set两个值</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11211
Trying 127.0.0.1...
&lt;31 new auto-negotiating client connection
Connected to 127.0.0.1.
Escape character is '^]'.
set city 0 0 7
31: Client using the ascii protocol
&lt;31 set city 0 0 7
tianjin
&gt;31 STORED
replication: pop
replication: pop
STORED
set city2 0 0 7
&lt;31 set city2 0 0 7
beijing
&gt;31 STORED
replication: pop
replication: pop
STORED  
</code></pre>

<blockquote><p>进入slave，get刚才设置的值，并删除其中一个值</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11212
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '^]'.
get city
VALUE city 0 7
tianjin
END
get city2
VALUE city2 0 7
beijing
END
delete city2
&lt;26 delete city2
REP&gt;26 DELETED
DELETED
</code></pre>

<blockquote><p>再次进入master，获取set的两个值，删除的数据是否可以get</p></blockquote>

<pre><code>[root@localhost ~]# telnet 127.0.0.1 11211
Trying 127.0.0.1...
&lt;31 new auto-negotiating client connection
Connected to 127.0.0.1.
Escape character is '^]'.
get city
31: Client using the ascii protocol
&lt;31 get city
&gt;31 sending key city
&gt;31 END
VALUE city 0 7
tianjin
END
get city2
&lt;31 get city2
&gt;31 END
END
</code></pre>
]]></content>
  </entry>
  
</feed>
